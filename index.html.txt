```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>BTC交易信号分析</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.8.1/prop-types.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.2/babel.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/chrono-node/1.3.11/chrono.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/recharts/2.15.0/Recharts.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 font-sans">
  <div id="root" class="container mx-auto p-4"></div>

  <script type="text/babel">
    // Fetch data from Financial Modeling Prep API
    function loadFileData() {
      const apiUrl = 'https://financialmodelingprep.com/api/v3/historical-price-full/BTCUSD?timeseries=900&apikey=cKlA3lVOMxMjg4hJsC0cn1YAIUu1Hk8P';
      return fetch(apiUrl)
        .then(response => {
          if (!response.ok) throw new Error('Failed to fetch API data');
          return response.json();
        })
        .then(data => {
          // Convert API data to CSV-like structure
          const historical = data.historical || [];
          const csvRows = ['Column1.date,Column1.close'];
          historical.forEach(row => {
            csvRows.push(`${row.date},${row.close}`);
          });
          return csvRows.join('\n');
        })
        .catch(err => {
          console.error('Error fetching API:', err);
          return '';
        });
    }

    // Calculate 20-day MA and trend
    function calculateIndicators(data) {
      return data.map((row, index, arr) => {
        // Calculate BTC20MA (20-day moving average)
        let BTC20MA = null;
        if (index >= 19) {
          const prices = arr.slice(index - 19, index + 1).map(r => r.price);
          BTC20MA = prices.reduce((sum, price) => sum + price, 0) / 20;
        }
        // Calculate BTC20MAtrend
        const prevBTC20MA = index > 19 ? arr[index - 1].BTC20MA : null;
        const BTC20MAtrend = BTC20MA && prevBTC20MA
          ? BTC20MA > prevBTC20MA ? '上升' : '下降'
          : '未知';
        return { ...row, BTC20MA, BTC20MAtrend };
      });
    }

    // Generate trading signals based on Excel formula
    function generateSignals(data) {
      return data.map((row, index, arr) => {
        if (index === 0) {
          return { ...row, Signal: '', POSITION: '空仓' };
        }
        const prevRow = arr[index - 1];
        const B2 = row.price;
        const D2 = row.BTC20MA;
        const F2 = row.BTC20MAtrend;
        const B3 = prevRow.price;
        const D3 = prevRow.BTC20MA;
        const F3 = prevRow.BTC20MAtrend;
        const I3 = prevRow.POSITION;

        let signal = '';
        // Sell signal
        if (
          D2 > B2 &&
          F2 === '下降' &&
          (
            (B2 < D2 * (1 - 0.01) && B3 >= D3) ||
            (I3 === '持有' && B2 < D2 && F3 === '上升')
          )
        ) {
          signal = '卖出';
        }
        // Buy signal
        else if (
          D2 < B2 &&
          F2 === '上升' &&
          (
            (B2 > D2 * (1 + 0.01) && B3 <= D3) ||
            (I3 === '空仓' && B2 > D2 && F3 === '下降')
          )
        ) {
          signal = '买入';
        }
        const position = signal === '买入' ? '持有' : signal === '卖出' ? '空仓' : prevRow.POSITION;
        return { ...row, Signal: signal, POSITION: position };
      });
    }

    // Main React component
    function BitcoinTradingDashboard() {
      const [data, setData] = React.useState([]);
      const [loading, setLoading] = React.useState(true);
      const [lastUpdate, setLastUpdate] = React.useState('-');
      const [showAllData, setShowAllData] = React.useState(false);

      // Fetch and process data
      const fetchData = () => {
        setLoading(true);
        loadFileData().then(csv => {
          if (!csv) {
            setLoading(false);
            return;
          }
          Papa.parse(csv, {
            header: true,
            skipEmptyLines: true,
            transformHeader: header => header.trim().replace(/^"|"$/g, ''),
            transform: (value, header) => {
              let cleaned = value.trim().replace(/^"|"$/g, '');
              if (header === 'Column1.date') {
                return chrono.parseDate(cleaned) || null;
              }
              if (header === 'Column1.close') {
                const num = parseFloat(cleaned);
                return isNaN(num) ? null : num;
              }
              return cleaned;
            },
            complete: results => {
              const cleanedData = results.data
                .filter(row => row['Column1.date'] && row['Column1.close'])
                .map(row => ({
                  date: row['Column1.date'],
                  price: row['Column1.close'],
                }))
                .sort((a, b) => a.date - b.date);
              const dataWithMA = calculateIndicators(cleanedData);
              const dataWithSignals = generateSignals(dataWithMA);
              setData(dataWithSignals);
              setLastUpdate(new Date().toLocaleString());
              setLoading(false);
            },
            error: err => {
              console.error('Error parsing data:', err);
              setLoading(false);
            },
          });
        });
      };

      // Initial fetch and auto-refresh every 5 minutes
      React.useEffect(() => {
        fetchData();
        const interval = setInterval(fetchData, 5 * 60 * 1000);
        return () => clearInterval(interval);
      }, []);

      // Filter data for display
      const filteredData = showAllData
        ? data
        : data.filter(row => {
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            return row.date >= thirtyDaysAgo;
          });

      // Extract signals for table
      const signals = filteredData
        .filter(row => row.Signal)
        .slice(-5)
        .reverse();

      // Get current metrics
      const currentPosition = data.length > 0 ? data[data.length - 1].POSITION : '未知';
      const latestPrice = data.length > 0 ? data[data.length - 1].price : 0;
      const latestChange = data.length > 0 && data.length > 1
        ? ((data[data.length - 1].price - data[data.length - 2].price) / data[data.length - 2].price * 100).toFixed(2)
        : 0;
      const latest20MA = data.length > 0 ? data[data.length - 1].BTC20MA : 0;
      const latestTrend = data.length > 0 ? data[data.length - 1].BTC20MAtrend : '分析中...';
      const pricePosition = latestPrice && latest20MA
        ? latestPrice > latest20MA ? '高于20日均线' : '低于20日均线'
        : '分析中...';

      // Format numbers
      const formatNumber = num => {
        if (num >= 1e6) return (num / 1e6).toFixed(2) + 'M';
        if (num >= 1e3) return (num / 1e3).toFixed(2) + 'K';
        return num.toFixed(2);
      };

      // Loading state
      if (loading) {
        return (
          <div className="text-center text-xl text-gray-600 mt-10">
            📊 正在获取最新BTC价格数据...
          </div>
        );
      }

      // Error state
      if (!data.length) {
        return (
          <div className="text-center text-xl text-red-600 mt-10">
            ⚠️ 无法加载数据，请检查数据源。
          </div>
        );
      }

      // Main dashboard
      return (
        <div className="bg-white shadow-lg rounded-lg p-6">
          <h1 className="text-3xl font-bold text-blue-600 mb-4 flex items-center">
            📊 BTC交易信号分析
          </h1>
          <p className="text-gray-600 mb-4">
            基于实时价格数据和技术指标的智能交易建议
          </p>
          <p className="text-gray-600 mb-4 italic">
            策略特点：捕捉高波动性机会，但信号较为稀疏，可能错过小幅波动。
          </p>

          {/* Last update and refresh */}
          <div className="mb-4">
            <p className="text-gray-600">📅 最后更新: {lastUpdate}</p>
            <div className="flex space-x-2 mt-2">
              <button
                onClick={fetchData}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
              >
                🔄 立即刷新
              </button>
              <span className="text-gray-600 self-center">📡 数据更新频率: 每5分钟</span>
            </div>
          </div>

          {/* Current trading suggestion */}
          <div className="mb-6">
            <h2 className="text-xl font-semibold text-gray-800 mb-2">🎯 当前交易建议</h2>
            <p className="text-lg font-bold text-blue-800">{currentPosition}</p>
            <p className="text-gray-600">基于最新市场数据分析</p>
          </div>

          {/* Price information */}
          <div className="mb-6">
            <h2 className="text-xl font-semibold text-gray-800 mb-2">💰 价格信息</h2>
            <p className="text-2xl font-bold text-green-600">${formatNumber(latestPrice)}</p>
            <p className="text-gray-600">变化: {latestChange}%</p>
            <p className="text-gray-500 text-sm">数据来源: Financial Modeling Prep</p>
          </div>

          {/* Moving averages */}
          <div className="mb-6">
            <h2 className="text-xl font-semibold text-gray-800 mb-2">📈 移动平均线对比</h2>
            <div className="flex space-x-4">
              <div>
                <p className="text-lg font-bold text-blue-600">${formatNumber(latest20MA)}</p>
                <p className="text-gray-600">20日均线</p>
              </div>
            </div>
          </div>

          {/* Technical indicators */}
          <div className="mb-6">
            <h2 className="text-xl font-semibold text-gray-800 mb-2">🔍 技术指标</h2>
            <p>价格位置: <span className="font-semibold">{pricePosition}</span></p>
            <p>趋势强度: <span className="font-semibold">{latestTrend}</span></p>
          </div>

          {/* Line chart */}
          <div className="mb-8">
            <Recharts.ResponsiveContainer width="100%" height={400}>
              <Recharts.LineChart data={filteredData} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>
                <Recharts.CartesianGrid strokeDasharray="3 3" />
                <Recharts.XAxis
                  dataKey="date"
                  tickFormatter={date => date.toLocaleDateString()}
                  style={{ fontSize: 12 }}
                />
                <Recharts.YAxis
                  dataKey="price"
                  tickFormatter={formatNumber}
                  style={{ fontSize: 12 }}
                  label={{ value: 'BTC价格 (USD)', angle: -90, position: 'insideLeft', offset: -10 }}
                />
                <Recharts.Tooltip
                  formatter={value => formatNumber(value)}
                  labelFormatter={label => new Date(label).toLocaleDateString()}
                />
                <Recharts.Legend />
                <Recharts.Line
                  type="monotone"
                  dataKey="price"
                  stroke="#3B82F6"
                  strokeWidth={2}
                  name="BTC价格"
                />
                <Recharts.Line
                  type="monotone"
                  dataKey="BTC20MA"
                  stroke="#F59E0B"
                  strokeWidth={2}
                  name="20日均线"
                />
                <Recharts.Scatter
                  data={filteredData.filter(row => row.Signal === '买入')}
                  name="买入信号"
                  fill="#10B981"
                  shape="triangle"
                />
                <Recharts.Scatter
                  data={filteredData.filter(row => row.Signal === '卖出')}
                  name="卖出信号"
                  fill="#EF4444"
                  shape="cross"
                />
              </Recharts.LineChart>
            </Recharts.ResponsiveContainer>
          </div>

          {/* Signals table */}
          <div className="mb-6">
            <h2 className="text-xl font-semibold text-gray-800 mb-2">📋 近期交易信号</h2>
            <div className="overflow-x-auto">
              <table className="w-full text-left border-collapse">
                <thead>
                  <tr className="bg-blue-100">
                    <th className="p-2">日期</th>
                    <th className="p-2">信号</th>
                    <th className="p-2">价格 (USD)</th>
                  </tr>
                </thead>
                <tbody>
                  {signals.map((signal, index) => (
                    <tr key={index} className="border-b">
                      <td className="p-2">{signal.date.toLocaleDateString()}</td>
                      <td className={`p-2 ${signal.Signal === '买入' ? 'text-green-600' : 'text-red-600'}`}>
                        {signal.Signal}
                      </td>
                      <td className="p-2">{formatNumber(signal.price)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Disclaimer */}
          <div className="text-gray-500 text-sm">
            <p>⚠️ 本分析仅供参考，投资有风险，决策需谨慎</p>
            <p>🤖 基于实时数据的量化分析系统</p>
          </div>
        </div>
      );
    }

    // Render component
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<BitcoinTradingDashboard />);
  </script>
</body>
</html>